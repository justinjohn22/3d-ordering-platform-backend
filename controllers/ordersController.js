// controllers/ordersController.js

import { supabase } from "../lib/supabaseClient.js";

export async function getAllOrders(req, res) {
    // Fetch all rows from "orders", sorted by created_at descending
    const { data, error } = await supabase
        .from("orders")
        .select("*")
        .order("created_at", { ascending: false });

    if (error) {
        console.error("Error fetching orders:", error);
        return res.status(500).json({ error: error.message });
    }

    return res.json(data);
}

export async function createNewOrder(req, res) {
    // Destructure exactly the fields your table expects:
    const {
        email,
        first_name,
        last_name,
        address,
        shoe_type,
        shoe_size,
        shoe_length,
        shoe_width,
        shoe_thickness,
        shoe_colour,
    } = req.body;

    // Basic validation: ensure each required field is present
    if (
        !email ||
        !first_name ||
        !last_name ||
        !address ||
        !shoe_type ||
        !shoe_size ||
        shoe_length == null ||      // float4 must not be null or undefined
        !shoe_width ||
        !shoe_thickness ||
        !shoe_colour
    ) {
        return res.status(400).json({
            error:
                "Missing required field. Please provide email, first_name, last_name, address, shoe_type, shoe_size, shoe_length, shoe_width, shoe_thickness, and shoe_colour.",
        });
    }

    // Insert into the "orders" table. 
    // Note: We omit `id` and `created_at` because they are auto‚Äêgenerated by Postgres.
    const { data, error } = await supabase.from("orders").insert([
        {
            email,
            first_name,
            last_name,
            address,
            shoe_type,
            shoe_size,
            shoe_length,
            shoe_width,
            shoe_thickness,
            shoe_colour,
        },
    ]).select(); // running .select() returns the newly inserted row(s)

    if (error) {
        console.error("Error creating order:", error);
        return res.status(500).json({ error: error.message });
    }

    // `data` is an array of inserted rows; return the first element
    return res.status(201).json(data[0]);
}
